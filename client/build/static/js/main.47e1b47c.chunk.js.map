{"version":3,"sources":["api/api.ts","components/Editor.tsx","components/DisplayWindow.tsx","hooks/useLocalStorage.tsx","styles/styles.ts","context/UserContext.ts","components/EditorPage.tsx","components/Login.tsx","components/Register.tsx","components/GettingStarted.tsx","components/LoginPage.tsx","components/Home.tsx","components/CreateProject.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axios","create","baseURL","Editor","language","value","onChange","className","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","DisplayWindow","srcDoc","setSrcDoc","html","css","javascript","useEffect","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","useLocalStorage","key","initialValue","prefixedKey","useState","jsonVal","localStorage","getItem","JSON","parse","setValue","setItem","stringify","Button","styled","button","active","block","SubmitButton","noWidth","H1","h1","H3","h3","StyledLink","Link","TextBox","input","TextArea","textarea","Select","select","Option","option","ErrorBox","div","UserContext","React","createContext","UserProvider","Provider","Consumer","EditorPage","history","useHistory","id","useParams","loggedIn","useContext","setHTML","setCSS","setJavascript","lastUpdateHtml","setLastUpdateHtml","lastUpdateCss","setLastUpdateCss","lastUpdateJs","setLastUpdateJs","current","setCurrent","project","setProject","setError","langs","displayName","getProject","a","api","get","withCredentials","response","msg","getCode","length","filter","c","lang","code","push","updateCode","projectId","put","updateInterval","setInterval","console","log","clearInterval","onClick","Login","setLoggedIn","loginEmail","setLoginEmail","loginPassword","setLoginPassword","loginError","setLoginError","onSubmit","e","preventDefault","post","email","password","login","type","placeholder","target","maxLength","Register","registerName","setRegisterName","registerUsername","setRegisterUsername","registerEmail","setRegisterEmail","registerPassword","setRegisterPassword","registrationError","setRegistrationError","registrationConfirmation","setRegisterConfirmation","name","username","register","GettingStarted","LoginPage","Home","projects","setProjects","error","getProjects","map","to","description","setTitle","setDescription","privacy","setPrivacy","HTMLresponse","CSSreponse","JAVASCRIPTresponse","createProject","App","isLoggedIn","path","exact","CreateProject","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.47e1b47c.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n    baseURL: 'http://localhost:5000/api/',\n})","import React from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\n\nconst Editor: React.FC<any> = ({ language, value, onChange }) => {\n    const handleChange = (editor: any, data: any, value: any) => {\n        onChange(value)\n    }\n\n    return (\n        <>\n            <div className='editor-container'>\n                <ControlledEditor \n                    onBeforeChange={handleChange}\n                    value={value}\n                    className='editor-wrapper'\n                    options = {{\n                        lineWrapping: true,\n                        lint: true,\n                        mode: language,\n                        lineNumbers: true,\n                        theme: 'material'\n                    }}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default Editor\n","import React, { useEffect} from 'react'\n\nconst DisplayWindow: React.FC<any> = ({srcDoc, setSrcDoc, html, css, javascript}) => {\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSrcDoc(`\n            <html>\n                <body>${html}</body>\n                <style>${css}</style>\n                <script>${javascript}</script>\n            </html>\n            `)\n        }, 1000)\n        \n        return () => clearTimeout(timeout)\n    }, [html, css, javascript])\n    return (\n        <div className='window display'>\n            <iframe \n                srcDoc={srcDoc}\n                title='output' \n                sandbox='allow-scripts'\n                frameBorder='0'\n                width='100%'\n                height='100%'\n            />\n        </div>\n    )\n}\n\nexport default DisplayWindow\n","import { useState, useEffect } from 'react'\n\nconst PREFIX = 'CODE_EDITOR_'\n\nconst useLocalStorage= (key: string, initialValue: any) => {\n    const prefixedKey = PREFIX + key\n    const [value, setValue] = useState(() => {\n        const jsonVal = localStorage.getItem(prefixedKey)\n\n        if (jsonVal) return JSON.parse(jsonVal)\n        \n        if (typeof initialValue === 'function'){\n            return initialValue()\n        }else{\n            return initialValue\n        }\n    })\n\n    useEffect(() => {\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\n    }, [prefixedKey, value])\n    return [value, setValue]\n}\n\nexport default useLocalStorage\n","import styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\ninterface ButtonProps {\n    active?: boolean,\n    block?: boolean,\n    primary?: boolean,\n    noWidth?: boolean\n}\n\nexport const Button = styled.button<ButtonProps>`\n    background: ${({ active }) => active ? '#333' : '#999'};\n    color: ${({ active }) => active ? '#fff' : '#000'};\n    border: none;\n    outline: none;\n    padding: .5em;\n    margin: 0em 0em .5em 0em;\n    display: ${(({ block }) => block ? 'block' : 'inline-block')};\n    &:hover {\n        background-color: ${({ active }) => active ? '#333' : '#888'};\n    }\n` \n\nexport const SubmitButton = styled.button<ButtonProps>`\n    background: #38A169;\n    color: #F7FAFC;\n    border: none;\n    outline: none;\n    font-size: 1em;\n    padding: 0em .5em;\n    width: ${({ noWidth }) => noWidth ? ' ' : '20vw'};\n    height: 5vh;\n    margin: 0em 0em .5em 0em;\n    display: ${(({ block }) => block ? 'block' : 'inline-block')};\n    &:hover {\n        background-color: #2F855A;\n    }\n` \n\n\nexport const H1 = styled.h1`\n    color: #E2E8F0;\n    font-family: Arial, Helvetica, sans-serif;\n`\n\nexport const H3 = styled.h3`\n    color: #A0AEC0;\n    font-family: Arial, Helvetica, sans-serif;\n`\n\nexport const StyledLink = styled(Link)`\n    text-decoration: none;\n    &:visited {\n        color: #E2E8F0;\n    }\n\n    &:hover {\n        color: #EDF2F7;\n    }\n`\n\nexport const TextBox = styled.input`\n    background-color: #CBD5E0;\n    color: #2D3748;\n    margin: auto auto 1em auto;\n    width: 20vw;\n    height: 5vh;\n    border: none;\n    display: block;\n    outline: none;\n    padding: 0em .2em;\n`\n\nexport const TextArea = styled.textarea`\n    background-color: #CBD5E0;\n    color: #2D3748;\n    margin: auto auto 1em auto;\n    width: 20vw;\n    height: 10vh;\n    border: none;\n    display: block;\n    outline: none;\n    padding: .5em .2em;\n    font-family: Arial, Helvetica, sans-serif;\n`\n\nexport const Select = styled.select`\n    width: 20vw;\n    height: 5vh;\n    color: #2D3748;\n    background-color: #CBD5E0;\n    margin: auto auto 1em auto;\n    border:none;\n    display: block;\n    outline: none;\n    padding: .5em .2em;\n`;\n\nexport const Option = styled.option`\n    width: 20vw;\n    color: #2D3748;\n    background-color: #CBD5E0;\n`\n\nexport const ErrorBox = styled.div`\n    width: 20vw;\n    padding: .5em;\n    background-color: #E53E3E;\n    margin: auto auto 1em auto;\n    color: #F7FAFC;\n    font-family: Arial, Helvetica, sans-serif;\n`\n","import React from 'react'\n\nconst UserContext = React.createContext({})\n\nexport const UserProvider = UserContext.Provider\nexport const UserConsumer = UserContext.Consumer\n\nexport default UserContext","import React, { useState, useEffect, useContext } from 'react'\nimport Editor from './Editor'\nimport DisplayWindow from './DisplayWindow'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport { languages } from '../interfaces/EditorInterface'\nimport { Button, H1, H3, SubmitButton } from '../styles/styles'\nimport UserContext from '../context/UserContext'\nimport api from '../api/api'\nimport { useHistory, useParams } from 'react-router-dom'\n\nconst EditorPage = () => {\n    const history = useHistory()\n    const { id } = useParams<any>()\n    const user = useContext<any>(UserContext)\n    const { loggedIn } = user\n    const [html, setHTML] = useLocalStorage('html', `test`)\n    const [css, setCSS] = useLocalStorage('css', '')\n    const [javascript, setJavascript] = useLocalStorage('javascript', '')\n    const [lastUpdateHtml, setLastUpdateHtml] = useState<string>('')\n    const [lastUpdateCss, setLastUpdateCss] = useState<string>('')\n    const [lastUpdateJs, setLastUpdateJs] = useState<string>('')\n    const [srcDoc, setSrcDoc] = useState<string>('')\n    const [current, setCurrent] = useState('html')\n    const [project, setProject] = useState()\n    const [error, setError] = useState<string>()\n\n    const langs: languages = {\n        html: {\n            language: 'xml',\n            displayName: 'HTML',\n            value: html,\n            onChange: setHTML\n        },\n        css: {\n            language: 'css',\n            displayName: 'CSS',\n            value: css,\n            onChange: setCSS,\n        },\n        javascript: {\n            language: 'javascript',\n            displayName: 'Javascript',\n            value: javascript,\n            onChange: setJavascript\n        }\n    }\n\n    useEffect(() => {\n        const getProject = async (id: number) => {\n            try {\n                const response = await api.get(`/project/${id}`, {\n                    withCredentials: true\n                })\n                setProject(response.data)\n            } catch (error) {\n                if (error.response.data){\n                    setError(error.response.data.msg)\n                }else{\n                    setError(\"Something went wrong!\")\n                }\n            }\n        }\n        const getCode = async (id: number) => {\n            try {\n                const response = await api.get(`/code/project/${id}`, {\n                    withCredentials: true\n                })\n                if (response.data && response.data.length > 0){\n                    setHTML(response.data.filter((c: any) => c.lang === 'html')[0].code)\n                    setLastUpdateHtml(response.data.filter((c: any) => c.lang === 'html')[0].code)\n                    setCSS(response.data.filter((c: any) => c.lang === 'css')[0].code)\n                    setLastUpdateCss(response.data.filter((c: any) => c.lang === 'css')[0].code)\n                    setJavascript(response.data.filter((c: any) => c.lang === 'javascript')[0].code)\n                    setLastUpdateJs(response.data.filter((c: any) => c.lang === 'javascript')[0].code)\n                }else{\n                    history.push('/')\n                }\n            } catch (error) {\n                if (error.response.data){\n                    setError(error.response.data.msg)\n                }else{\n                    setError(\"Something went wrong!\")\n                }\n            }\n        }\n\n        const updateCode = async (lang: string, projectId: number) => {\n            try {\n                const response = await api.put(`/code/update/${lang}/${projectId}`, {\n                    code: langs[lang].value\n                }, {\n                    withCredentials: true\n                })\n            } catch (error) {\n                if (error.response.data.msg){\n                    setError(error.response.data.msg)\n                }else{\n                    setError(\"Something went wrong!\")\n                }\n            }\n        }\n        \n        if (id && !project){\n            getProject(id)\n            getCode(id)\n        }\n\n        if (id) {\n            const updateInterval = setInterval(() => {\n                console.log('update')\n                if (html !== lastUpdateHtml){\n                    setLastUpdateHtml(() => html)\n                    updateCode('html', id)\n                }\n                if (css !== lastUpdateCss){\n                    setLastUpdateCss(() => css)\n                    updateCode('css', id)\n                }\n                if (javascript !== lastUpdateJs){\n                    setLastUpdateJs(() => javascript)\n                    updateCode('javascript', id)\n                }\n            }, 60 * 1000);\n    \n            return () => clearInterval(updateInterval);\n        }\n    }, [html, css, javascript, lastUpdateHtml, lastUpdateCss, lastUpdateJs])\n\n\n    return (\n        <>\n            <div className='window-container'>\n                <div className='window code-window'>\n                    {\n                    loggedIn ? <>\n                        <H3 onClick={() => history.push('/')}>Home</H3>\n                        {\n                            id && project ?\n                                project.title ? <H1>{project.title}</H1> : <H1>Untitled</H1>\n                            : null\n                        }\n                        </>\n                    : <>\n                        <SubmitButton block={true} onClick={() => history.push('/getStarted')} noWidth={true} >Get Started</SubmitButton>\n                    </>\n                    }\n\n                    <Button active={current === 'html' ? true : false} onClick={() => setCurrent('html')}>HTML</Button>\n                    <Button active={current === 'css' ? true : false} onClick={() => setCurrent('css')}>CSS</Button>\n                    <Button active={current === 'javascript' ? true : false} onClick={() => setCurrent('javascript')}>Javascript</Button>\n                    <Editor \n                        language={langs[current].language}\n                        displayName={langs[current].displayName}\n                        value={langs[current].value}\n                        onChange={langs[current].onChange}\n                    />\n                </div>\n                <div className='window display'>\n                    <DisplayWindow \n                        srcDoc={srcDoc} \n                        setSrcDoc={setSrcDoc} \n                        html={html} css={css} \n                        javascript={javascript} \n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default EditorPage\n","import React, { useState, useContext } from 'react'\nimport { TextBox, SubmitButton, ErrorBox } from '../styles/styles'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api/api'\nimport UserContext from '../context/UserContext'\n\nconst Login = () => {\n    const user = useContext<any>(UserContext)\n    const { setLoggedIn } = user\n    const history = useHistory()\n    const [loginEmail, setLoginEmail] = useState<string>('')\n    const [loginPassword, setLoginPassword] = useState<string>('')\n    const [loginError, setLoginError] = useState<string>('')\n\n    const submitLogin = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (loginEmail && loginPassword){\n            const login = async () => {\n                try{\n                    const response = await api.post('/user/login', {\n                        email: loginEmail,\n                        password: loginPassword\n                    }, {\n                        withCredentials: true\n                    })\n                    if (response.data){\n                        setLoggedIn(true)\n                        history.push('/')\n                    }\n                }catch(error){\n                    setLoginError(error.response.data.msg)\n                }\n            }\n            login()\n        }\n    }\n\n    return (\n        <div className='loginContainer'>\n            { loginError ? <ErrorBox>{loginError}</ErrorBox> : null}\n            <form onSubmit={submitLogin}>\n                <TextBox type='email' placeholder='Email Address' onChange={(e) => setLoginEmail(e.target.value)} maxLength={200} />\n                <TextBox type='password' placeholder='Password' onChange={(e) => setLoginPassword(e.target.value)} maxLength={300} />\n                <SubmitButton active={true}>Login</SubmitButton>\n            </form>\n        </div>\n    )\n}\n\nexport default Login\n","import React, { useState } from 'react'\nimport { TextBox, SubmitButton, ErrorBox } from '../styles/styles'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api/api'\n\nconst Register = () => {\n    const history = useHistory()\n    const [registerName, setRegisterName] = useState<string>('')\n    const [registerUsername, setRegisterUsername] = useState<string>('')\n    const [registerEmail, setRegisterEmail] = useState<string>('')\n    const [registerPassword, setRegisterPassword] = useState<string>('')\n    const [registrationError, setRegistrationError] = useState<string>('')\n    const [registrationConfirmation, setRegisterConfirmation] = useState(null)\n\n    const submitRegister = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (registerName && registerUsername && registerEmail && registerPassword){\n            const register = async () => {\n                try{\n                    const response = await api.post('/user/register', {\n                        name: registerName,\n                        username: registerUsername,\n                        email: registerEmail,\n                        password: registerPassword\n                    }, {\n                        withCredentials: true\n                    })\n                    setRegisterConfirmation(response.data)\n                }catch(error){\n                    setRegistrationError(error.response.data.msg)\n                }\n            }\n            register()\n        }\n    }\n\n    if (registrationConfirmation) {\n        history.push('/login')\n    }\n    \n    return (\n        <div className='registrationContainer'>\n            { registrationError ? <ErrorBox>{registrationError}</ErrorBox> : null}\n            <form onSubmit={submitRegister}>\n                <TextBox type='text' placeholder='Name' maxLength={50} onChange={(e) => setRegisterName(e.target.value)} />\n                <TextBox type='text' placeholder='Username' maxLength={100} onChange={(e) => setRegisterUsername(e.target.value)} />\n                <TextBox type='email' placeholder='Email Address' maxLength={200} onChange={(e) => setRegisterEmail(e.target.value)} />\n                <TextBox type='password' placeholder='Password'maxLength={300} onChange={(e) => setRegisterPassword(e.target.value)} />\n                <SubmitButton active={true}>Register</SubmitButton>\n            </form>\n        </div>\n    )\n}\n\nexport default Register\n","import React from 'react'\nimport Login from './Login'\nimport Register from './Register'\n\nconst GettingStarted = () => {\n\n    return (\n        <div className='container'>\n            <div className='loginRegistrationContainer'>\n                <Login />\n                <Register />\n            </div>\n        </div>\n    )\n}\n\nexport default GettingStarted\n","import React from 'react'\nimport Login from './Login'\n\nconst LoginPage = () => {\n    return (\n        <div className='container'>\n            <div className='loginRegistrationContainer'>\n                <Login />\n            </div>\n        </div>\n    )\n}\n\nexport default LoginPage\n","import React, { useEffect, useState } from 'react'\nimport { H1, H3, SubmitButton, ErrorBox, StyledLink } from '../styles/styles'\nimport api from '../api/api'\nimport { useHistory, Link } from 'react-router-dom'\n\nconst Home = () => {\n    const [projects, setProjects] = useState()\n    const [error, setError] = useState<string>()\n    useEffect(() => {\n        const getProjects = async () => {\n            try {\n                const response = await api.get('/project/user/', {\n                    withCredentials: true\n                })\n                setProjects(response.data)\n            } catch (error) {\n                setError(error.response.data.msg)\n            }\n        }\n\n        getProjects()\n    }, [])\n\n    const history = useHistory()\n    return (\n        <div className='container'>\n            <div className='homeContainer'>\n                <div className='title'>\n                    <H1>Hello, Kyle</H1>\n                </div>\n                { error ? <ErrorBox>{ error}</ErrorBox> : null}\n                <div className='projectContainer'>\n                    {\n                        projects ? projects.map((project: any) => ( \n                            <div key={project.id}>\n                                <H1><StyledLink to={`/project/${project.id}`} >{project.title}</StyledLink></H1>\n                                <H3>{project.description}</H3>\n                            </div>\n                        )) : null\n                    }\n                </div>\n                <div className='createProjectContainer'>\n                    <SubmitButton noWidth={true} onClick={() => history.push('/project/create')} >Create New Project</SubmitButton>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { TextArea, TextBox, SubmitButton, Select, Option, ErrorBox } from '../styles/styles'\nimport { useHistory } from 'react-router-dom'\nimport api from '../api/api'\n\nconst Home = () => {\n    const [title, setTitle] = useState<string>('')\n    const [description, setDescription] = useState<string>('')\n    const [privacy, setPrivacy] = useState<string>('Private')\n    const [error, setError] = useState<string | null>(null)\n    const history = useHistory()\n\n    const submit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        if (title && description){\n            const createProject = async () => {\n                try {\n                    const response = await api.post('/project/create', {\n                        title,\n                        description,\n                        privacy: privacy === 'Private' ? true : false\n                    }, {\n                        withCredentials: true\n                    })\n                    if (response.data){\n                        const HTMLresponse = await api.post('/code/create', {\n                            projectId: response.data.id,\n                            lang: 'html',\n                            code: ''\n                        },{\n                            withCredentials: true\n                        })\n                        const CSSreponse = await api.post('/code/create', {\n                            projectId: response.data.id,\n                            lang: 'css',\n                            code: ''\n                        },{\n                            withCredentials: true\n                        })\n                        const JAVASCRIPTresponse = await api.post('/code/create', {\n                            projectId: response.data.id,\n                            lang: 'javascript',\n                            code: ''\n                        },{\n                            withCredentials: true\n                        })\n                        if (HTMLresponse && CSSreponse && JAVASCRIPTresponse){\n                            history.push(`/project/${response.data.id}`)\n                        }\n                    }\n                } catch (error) {\n                    setError(error.response.data.msg)\n                }\n            }\n            createProject()\n        }\n    }\n\n    return (\n    <div className='container'>\n            { error ? <ErrorBox>{error}</ErrorBox> : null}\n            <form onSubmit={submit}>\n                <TextBox type='text' placeholder='Title' maxLength={100} onChange={(e) => setTitle(e.target.value)} />\n                <TextArea placeholder='Description' maxLength={200} onChange={(e) => setDescription(e.target.value)} ></TextArea>\n                <Select value={privacy} onChange={(e) => setPrivacy(e.target.value)}>\n                    <Option value='Private'>\n                        Private\n                    </Option>\n                    <Option value='Public'>\n                        Public\n                    </Option>\n                </Select>\n                <SubmitButton>Submit</SubmitButton>\n            </form>\n    </div>\n    )\n}\n\nexport default Home\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport api from './api/api'\nimport EditorPage from './components/EditorPage'\nimport GettingStarted from './components/GettingStarted'\nimport LoginPage from './components/LoginPage'\nimport Home from './components/Home'\nimport CreateProject from './components/CreateProject'\nimport { UserProvider } from './context/UserContext'\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState<boolean | null>(null)\n  useEffect(() => {\n    const isLoggedIn = async () => {\n      try {\n        const response = await api.get('/user/isLoggedIn',\n        {\n          withCredentials: true\n        })\n        setLoggedIn(true)\n      } catch (error) {\n        setLoggedIn(false)\n      }\n    }\n\n    isLoggedIn()\n  }, [loggedIn])\n\n  return (\n    <UserProvider value={{ loggedIn, setLoggedIn }}>\n      {loggedIn ? \n        <Router>\n          <Switch>\n            <Route path='/' exact>\n              <Home />\n            </Route>\n            <Route path='/project/create' exact>\n              <CreateProject />\n            </Route>\n            <Route path='/project/:id' exact>\n              <EditorPage />\n            </Route>\n          </Switch>\n      </Router>\n     :\n      <Router>\n          <Switch>\n            <Route path='/' exact>\n              <EditorPage />\n            </Route>\n            <Route path='/getStarted' exact>\n              <GettingStarted />\n            </Route>\n            <Route path='/login' exact>\n              <LoginPage />\n            </Route>\n          </Switch>\n      </Router> }\n    </UserProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}